service: notes-api
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-east-1

functions:
  # Create Operation - AWS Lambda function and configuration for creating a new note.
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes
          method: post
          cors: true  # Add CORS configuration here
          private: true
          request:
            parameters:
              headers:
                x-api-key: true  # This specifies that x-api-key header is required

  # Update Operation - AWS Lambda function and configuration for updating an existing note.
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:updateItem
        Resource: !GetAtt notesTable.Arn 
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true  # Add CORS configuration here
          private: true
          request:
            parameters:
              headers:
                x-api-key: true  # This specifies that x-api-key header is required

  # Read Operation - AWS Lambda function and configuration for retrieving all notes.
  getAllNotes:
    handler: handler.getAllNotes
    environment: 
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes
          method: get
          cors: true  # Add CORS configuration here
          private: true
          request:
            parameters:
              headers:
                x-api-key: true  # This specifies that x-api-key header is required

  # Delete Operation - AWS Lambda function and configuration for deleting a note.
  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:deleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true  # Add CORS configuration here
          private: true
          request:
            parameters:
              headers:
                x-api-key: true  # This specifies that x-api-key header is required

plugins:
  - serverless-iam-roles-per-function

# CloudFormation resource for creating the DynamoDB table.
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5


